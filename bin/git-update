#!/usr/bin/env bash
#
# Rebase a branch on master

set -e
trap 'echo "error: on line ${LINENO}"' ERR

usage() {
	echo 1>&2 "usage: git-update [--all] [--pull] [branch]"
	echo 1>&2 ""
	echo 1>&2 "   update the given branch against the remote origin, if no branch"
	echo 1>&2 "   is given then the master branch will be assumed"
	echo 1>&2 ""
	echo 1>&2 "   --all   update all branches"
	echo 1>&2 "   --pull  pull changes into master from origin"
	exit 2
}


update_all=false
pull_from_origin=false

arguments=()
while (( $# > 0 )); do
	key=$1
	case $key in
		-h|--help)
			usage
			;;
		--all)
			update_all=true;
			shift
			;;
		--pull)
			pull_from_origin=true
			shift
			;;
		*)
			arguments+=("$1")
			shift
			;;
	esac
done
set -- "${arguments[@]}"

BASE_BRANCH=master
DEFAULT_REMOTE=origin

__git_current_branch() {
	git branch --list | grep '*' | cut -c 3-
}

__git_list_branches() {
	git branch --list | grep -vE '^[* ] master$' | cut -c 3-
}


if [[ $branch == $BASE_BRANCH ]]; then
	# noop
	exit 0
fi

if $pull_from_origin; then
	git checkout "${BASE_BRANCH}"
	git pull "${DEFAULT_REMOTE}"
	git remote prune "${DEFAULT_REMOTE}"
fi

if $update_all; then
	for branch in $(__git_list_branches); do
		git checkout "${branch}"
		git rebase "${BASE_BRANCH}"
	done
else
	branch=${1:-$(__git_current_branch)}
	git checkout "${branch}"
	git rebase "${BASE_BRANCH}"
fi
